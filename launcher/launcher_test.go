package launcher

import (
	"database/sql"
	"fmt"
	"github.com/HydroProtocol/hydro-sdk-backend/config"
	"github.com/HydroProtocol/hydro-sdk-backend/models"
	"github.com/HydroProtocol/hydro-sdk-backend/sdk/ethereum"
	"github.com/HydroProtocol/hydro-sdk-backend/test"
	"github.com/HydroProtocol/hydro-sdk-backend/utils"
	"github.com/shopspring/decimal"
	"testing"
	"time"
)

func TestLauncher_Run(t *testing.T) {
	test.PreTest()
	models.InitTestDB()

	launchLog := models.LaunchLog{
		ItemType:    "hydroTrade",
		ItemID:      1,
		Status:      "created",
		Hash:        sql.NullString{},
		BlockNumber: sql.NullInt64{},

		From:     "0x93388b4efe13b9b18ed480783c05462409851547",
		To:       "0x36f179ff6e8a4816509ed867bd273fddeb409331",
		Value:    decimal.Zero,
		GasLimit: 1000000,

		// use a reasonable gasPrice instead of static one
		// There are several options
		//   1. use eth gas station api (https://ethgasstation.info/)
		//   2. use eth_gasPrice Ethereum json rpc call
		//   3. develop your own eth gasPrice tracker
		GasPrice: decimal.NullDecimal{Decimal: utils.StringToDecimal("10000000000"), Valid: true},
		Data:     "0xd152451300000000000000000000000031ebd457b999bf99759602f5ece5aa5033cb56b30000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000a688906bd8b000000000000000000000000000000000000000000000000000000000000000000000020000118a7054a00064012c000061feb9a68fdc13bc000000000000000000001b000000000000000000000000000000000000000000000000000000000000006cf2cf8718419782d08269d1536fbca7f93b8ddd7a3703706a8a50c74fb5b4c83dbf8c327ba5fa176d419c07efbe965ba000c7c8b899da97bdfdf9094ad3fe4b00000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000004c4fa7e8ea4cfcfc93deae2c0cff142a1dd3a218000000000000000000000000bc3524faa62d0763818636d5e400f112279d6cc000000000000000000000000093388b4efe13b9b18ed480783c0546240985154700000000000000000000000004f67e8b7c39a25e100847cb167460d715215feb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000003eb06f432ae8f518a957852aa44776c234b4a84a0000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000d02ab486cedc00000000000000000000000000000000000000000000000000000000000000000000020100118a7052a00064012c0000137ac21c4931b47a000000000000000000001c0000000000000000000000000000000000000000000000000000000000000085d7c1fbbb95db271eca4b093053c3917d4dd5609d37cd3ca89a9539d561a41437d12d2277eb06019dd1c1f94df050c54274d635038b4847fc267ac4a83b86c900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000006f05b59d3b200000",

		ExecutedAt: time.Now(),
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	hydro := ethereum.NewEthereumHydro(config.Getenv("HSK_BLOCKCHAIN_RPC_URL"))
	signService := NewDefaultSignService(config.Getenv("HSK_RELAYER_PK"), hydro.GetTransactionCount)

	signedTransaction := signService.Sign(&launchLog)

	hash, err := hydro.SendRawTransaction(signedTransaction)

	fmt.Println(hash, err)
	// if err != nil {
	// 	t.Log(err)
	// 	t.Errorf("sendRawTransaction err")
	// }
}
